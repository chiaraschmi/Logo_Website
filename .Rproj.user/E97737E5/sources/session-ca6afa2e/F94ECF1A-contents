---
title: "Final Logo"
output: html_document
date: "2025-04-04"
---
Creating a global environment, to store the current state of the turtle:
```{r}
turtle_state <- new.env()
turtle_state$x <- 0
turtle_state$y <- 0
turtle_state$heading <- 0
turtle_state$is_visible <- 1
turtle_state$plot_history <- list()
turtle_state
```


Then creating an internal function, that will update the plot history in the global environment based on the new position of the turtle
```{r}
update_plot_history <- function(from_x, from_y, to_x, to_y) {
  line_segment <- list(
    x_start = from_x, #starting coordinates
    y_start = from_y, 
    x_end = to_x, #ending coordinates
    y_end = to_y
  )
  turtle_state$plot_history[[length(turtle_state$plot_history) + 1]] <- line_segment #adding a line segment to the movement history -> determining the current length of the history, adding 1, to get to the next available index and storing the new line segment in that position of the list
}
```


Create a function that will plot the graphic
```{r}

Plotting_Turtle <- function() {
  
  # Redraw the entire plot
  plot(0, 0, xlim=c(-100, 100), ylim=c(-100, 100), 
       xlab="X", ylab="Y", main="Turtle Graphics", 
       type="n")
  
  # Redraw all previous lines
  for (line in turtle_state$plot_history) {
    lines(c(line$x_start, line$x_end), 
          c(line$y_start, line$y_end), 
          col="black")
    }
  
  if(turtle_state$is_visible == 1) {
      points(turtle_state$x, turtle_state$y, pch=16, col="darkgreen", cex=1.5)
    #show heading with an arrow
    arrow_length <- 8
    rad <- turtle_state$heading * pi / 180
    arrow_x <- turtle_state$x + arrow_length * cos(rad)
    arrow_y <- turtle_state$y + arrow_length * sin(rad)
    arrows(turtle_state$x, turtle_state$y, arrow_x, arrow_y, 
           length=0.1, col= "#DAA520", lwd=2)
  }  
}

Plotting_Turtle()
```

Now creating the CLEARSCREEN Funtion: Clears the screen

```{r}
CS <- function() {
  # Reset turtle to home position
  turtle_state$x <- 0
  turtle_state$y <- 0
  turtle_state$heading <- 0
  turtle_state$plot_history <- list()
  
  # Clear the current plot
  Plotting_Turtle()
}

CS()

```

HIDETURTULE Function, when I want to hide the turtle:
```{r}
HT <- function(turtle_state) {
  turtle_state$is_visible <- 0
  Plotting_Turtle()
}

HT(turtle_state)
```

SHOWTURTULE Function, when I wnat to show the turtle:
```{r}
ST <- function(turtle_state) {
  turtle_state$is_visible <- 1
  Plotting_Turtle()
}

ST(turtle_state)
```

FORWARD Function, to move forward X steps
```{r}
FD <- function(steps) {
  # current position of the turtle
  old_x <- turtle_state$x
  old_y <- turtle_state$y
  
  # Heading: Convert degrees to radians
  rad <- turtle_state$heading * pi / 180
  
  # Calculate new coordinates
  new_x <- old_x + steps * cos(rad)
  new_y <- old_y + steps * sin(rad)
  
  # Update plot history
  update_plot_history(old_x, old_y, new_x, new_y)
  
  # Update turtle position
  turtle_state$x <- new_x
  turtle_state$y <- new_y
  
  # Redraw the entire plot
  Plotting_Turtle()
}


```

FORWARD without drawing a plot - If you want to use FD in a loop (so it doesn't draw the plot for every step)
```{r}
FD_no_plot <- function(steps) {
  # Calculate new position based on current heading
  old_x <- turtle_state$x
  old_y <- turtle_state$y
  
  # Convert degrees to radians
  rad <- turtle_state$heading * pi / 180
  
  # Calculate new coordinates
  new_x <- old_x + steps * cos(rad)
  new_y <- old_y + steps * sin(rad)
  
  # Update plot history
  update_plot_history(old_x, old_y, new_x, new_y)
  
  # Update turtle position
  turtle_state$x <- new_x
  turtle_state$y <- new_y
}
```


BACK, to go back X steps
```{r}
BK <- function(steps) {
  FD(-steps)
}

```


BACK without plot (for loops)
```{r}
BK_no_plot <- function(steps) {
  FD_no_plot(-steps)
}
```

Function LEFT, to turn this many degrees
```{r}
LT <- function(degrees) {
  turtle_state$heading <- (turtle_state$heading + degrees) %% 360
  Plotting_Turtle()
}

```

LEFT without a plot (for loops)
```{r}
LT_no_plot <- function(degrees) {
  turtle_state$heading <- (turtle_state$heading + degrees) %% 360
}
```

Function RIGHT, to turn this many degrees
```{r}
RT <- function(degrees) {
  turtle_state$heading <- (turtle_state$heading - degrees) %% 360
  Plotting_Turtle()
}
```


RIGHT without a plot (for loops)
```{r}
RT_no_plot <- function(degrees) {
  turtle_state$heading <- (turtle_state$heading - degrees) %% 360
}
```

Function SETHEADING, to turn an absolute value of degrees
```{r}
SETH <- function(degrees) {
  
  turtle_state$heading <- degrees %% 360
  Plotting_Turtle()
}

```

SETPOS, to set the X and Y coordinates
```{r}

SETPOS <- function(X, Y) {
  # Set absolute position
  old_x <- turtle_state$x
  old_y <- turtle_state$y
  
  turtle_state$x <- X
  turtle_state$y <- Y
  
  # Update plot history if drawing
  update_plot_history(old_x, old_y, 
                      turtle_state$x, turtle_state$y)
  
  # Redraw the entire plot
 Plotting_Turtle()
}

```

HOME function, to move back to 0,0
```{r}

HOME<- function() {
  
  old_x <- turtle_state$x
  old_y <- turtle_state$y
  
  # Set the absolute position to zero
  turtle_state$x <- 0
  turtle_state$y <- 0
  
  # Update plot history
  update_plot_history(old_x, old_y, 
                      turtle_state$x, turtle_state$y)
  
  # Redraw the entire plot
  Plotting_Turtle()
}
HOME()

```



SETX, set the horizontal posiiton to X
```{r}
SETX <- function(X) {
 # Set absolute position
  old_x <- turtle_state$x
  old_y <- turtle_state$y
  
  turtle_state$x <- X
  
  # Update plot history if drawing
  update_plot_history(old_x, old_y, 
                      turtle_state$x, turtle_state$y)
  
  # Redraw the entire plot
  Plotting_Turtle()
}

```


SETY, set the vertical position to Y
```{r}
SETY <- function(Y) {
 # Set absolute position
  old_x <- turtle_state$x
  old_y <- turtle_state$y
  
  turtle_state$y <- Y
  
  # Update plot history if drawing
  update_plot_history(old_x, old_y, 
                      turtle_state$x, turtle_state$y)
  
  # Redraw the entire plot
  Plotting_Turtle()
}

```


test - draw a square:
```{r}
square <- function() {
  
  CS()
  FD(50)
  RT(90)
  FD(50)
  RT(90)
  FD(50)
  RT(90)
  FD(50)
}

square()

```

draw the sphere pattern
```{r}

HT(turtle_state) #hide the turtle

draw_sphere <- function() {
  # Clear the screen
  CS()
  
  # Recreate the pattern
  for (i in 1:20) {
    for (j in 1:180) {
      FD_no_plot(1)  #use FD no plot, so it doens't redraw the plot for every step
      RT_no_plot(2)  #same here
    }
    RT_no_plot(18)    # After inner loop, turn right 18 degrees
  }
  
  Plotting_Turtle() #use this, because we used FD&RT function that doesn't plot
}

draw_sphere()



```


