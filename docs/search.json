[
  {
    "objectID": "Logo_Github_Final.html",
    "href": "Logo_Github_Final.html",
    "title": "Final Logo",
    "section": "",
    "text": "Global environment with vectors for plot history\n\n  turtle_state &lt;- new.env()\n  turtle_state$x &lt;- 0\n  turtle_state$y &lt;- 0\n  turtle_state$heading &lt;- 0\n  turtle_state$is_visible &lt;- 1\n  turtle_state$plot_turtle &lt;- 1\n  \n  #vectors wtih maximum expectet length\n  turtle_state$path_x &lt;- numeric(10000)\n  turtle_state$path_y &lt;- numeric(10000)\n  \n   # Initialize first point\n  turtle_state$path_x[1] &lt;- 0\n  turtle_state$path_y[1] &lt;- 0\n  \n  # Keep track of the current length of the path\n  turtle_state$path_length &lt;- 1\n\nInternal function to update the history and global environment\n\nupdate_path &lt;- function(new_x, new_y) {\n  # Get the next index position\n  next_pos &lt;- turtle_state$path_length + 1\n\n # Add the new point\n  turtle_state$path_x[next_pos] &lt;- new_x\n  turtle_state$path_y[next_pos] &lt;- new_y\n\n # Update the path length\n  turtle_state$path_length &lt;- next_pos\n}\n\nPlot turtle for the vectorized paths:\n\nPlotting_Turtle &lt;- function() {\n  # Set up the plot\n  par(pty = \"s\")\n  plot(0, 0, xlim=c(-100, 100), ylim=c(-100, 100),\n       xlab=\"X\", ylab=\"Y\", main=\"Turtle Graphics\", \n       type=\"n\")\n  \n  current_length &lt;- turtle_state$path_length\n  if (current_length &gt; 1) {\n    lines(\n      turtle_state$path_x[1:current_length], \n      turtle_state$path_y[1:current_length], \n      col=\"black\"\n    )\n  }\n  \n  # Draw the turtle if visible\n  if(turtle_state$is_visible == 1) {\n    points(turtle_state$x, turtle_state$y, pch=16, col=\"darkgreen\", cex=1.5)\n    \n    # Show heading with an arrow\n    arrow_length &lt;- 8\n    rad &lt;- turtle_state$heading * pi / 180\n    arrow_x &lt;- turtle_state$x + arrow_length * cos(rad)\n    arrow_y &lt;- turtle_state$y + arrow_length * sin(rad)\n    arrows(turtle_state$x, turtle_state$y, arrow_x, arrow_y, \n           length=0.1, col= \"#DAA520\", lwd=2)\n  }\n}\n\nPlotting_Turtle()\n\n\n\n\n\n\n\n\nFunction, so I can change if I want to plot or not (so in loops it doesn’t plot for every step)\n\nchange_turtle_plot &lt;- function(turtle_state, plot = TRUE) {\n  # Wenn plot = TRUE, setze plot_turtle auf 1, =FALSE auf 0\n  turtle_state$plot_turtle &lt;- if(plot) 1 else 0\n}\n\nchange_turtle_plot(turtle_state, plot = TRUE)\n\nNow creating the CLEARSCREEN Funtion: Clears the screen\n\nCS &lt;- function() {\n  # Reset turtle to home position\n  turtle_state$x &lt;- 0\n  turtle_state$y &lt;- 0\n  turtle_state$heading &lt;- 0\n  \n  # Initialize first point\n  turtle_state$path_x[1] &lt;- 0\n  turtle_state$path_y[1] &lt;- 0\n  \n  # Keep track of the current length of the path\n  turtle_state$path_length &lt;- 1\n  \n  # Clear the current plot\n if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nCS()\n\n\n\n\n\n\n\n\nHIDETURTULE Function, when I want to hide the turtle:\n\nHT &lt;- function(turtle_state) {\n  turtle_state$is_visible &lt;- 0\n  \n  if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nHT(turtle_state)\n\n\n\n\n\n\n\n\nSHOWTURTULE Function, when I wnat to show the turtle:\n\nST &lt;- function(turtle_state) {\n  turtle_state$is_visible &lt;- 1\n  \n  if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nST(turtle_state)\n\n\n\n\n\n\n\n\nForward Function\n\nFD &lt;- function(steps, drawplot = TRUE) {\n  \n  # Heading: Convert degrees to radians\n  rad &lt;- turtle_state$heading * pi / 180\n  \n  # Calculate new coordinates\n  new_x &lt;- turtle_state$x + steps * cos(rad)\n  new_y &lt;- turtle_state$y + steps * sin(rad)\n  \n  #add the new point to the path\n  update_path(new_x, new_y)\n  \n  # Update turtle position\n  turtle_state$x &lt;- new_x\n  turtle_state$y &lt;- new_y\n  \n  if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\n\nFD(50)\n\n\n\n\n\n\n\n\nBACK, to go back X steps\n\nBK &lt;- function(steps) {\n  FD(-steps)\n}\n\nBK(100)\n\n\n\n\n\n\n\n\nFunction LEFT, to turn this many degrees\n\nLT &lt;- function(degrees) {\n  turtle_state$heading &lt;- (turtle_state$heading + degrees) %% 360\n  \n   if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nLT(90)\n\n\n\n\n\n\n\n\nFunction RIGHT, to turn this many degrees\n\nRT &lt;- function(degrees) {\n  turtle_state$heading &lt;- (turtle_state$heading - degrees) %% 360\n  \n   if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nRT(90)\n\n\n\n\n\n\n\n\nFunction SETHEADING, to turn an absolute value of degrees\n\nSETH &lt;- function(degrees) {\n  \n  turtle_state$heading &lt;- degrees %% 360\n  \n   if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nSETH(90)\n\n\n\n\n\n\n\n\nSETPOS, to set the X and Y coordinates\n\nSETPOS &lt;- function(new_x, new_y) {\n  # Set absolute position\n  # Get the next index position\n  next_pos &lt;- turtle_state$path_length + 1\n\n # Add the new point\n  turtle_state$path_x[next_pos] &lt;- new_x\n  turtle_state$path_y[next_pos] &lt;- new_y\n\n # Update the path length\n  turtle_state$path_length &lt;- next_pos\n  \n   #add the new point to the path\n  update_path(new_x, new_y)\n  \n  # Update turtle position\n  turtle_state$x &lt;- new_x\n  turtle_state$y &lt;- new_y\n  \n   if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nSETPOS(50,50)\n\n\n\n\n\n\n\n\nHOME function, to move back to 0,0\n\nHOME&lt;- function() {\n  # Set absolute position\n  # Get the next index position\n  next_pos &lt;- turtle_state$path_length + 1\n\n # Add the new point\n  turtle_state$path_x[next_pos] &lt;- 0\n  turtle_state$path_y[next_pos] &lt;- 0\n\n # Update the path length\n  turtle_state$path_length &lt;- next_pos\n  \n   #add the new point to the path\n  update_path(0, 0)\n  \n  # Update turtle position\n  turtle_state$x &lt;- 0\n  turtle_state$y &lt;- 0\n  \n   if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\nHOME()\n\n\n\n\n\n\n\n\nSETX, set the horizontal posiiton to X\n\nSETX &lt;- function(new_x) {\n  \n   current_y &lt;- turtle_state$y\n   \n  # Get the next index position\n  next_pos &lt;- turtle_state$path_length + 1\n\n # Add the new point\n  turtle_state$path_x[next_pos] &lt;- new_x\n  turtle_state$path_y[next_pos] &lt;- current_y\n\n # Update the path length\n  turtle_state$path_length &lt;- next_pos\n  \n   #add the new point to the path\n  update_path(new_x, current_y)\n  \n  # Update turtle position\n  turtle_state$x &lt;- new_x\n  turtle_state$y &lt;- current_y\n  \n  \n   if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nSETX(100)\n\n\n\n\n\n\n\n\nSETY, set the vertical position to Y\n\nSETY &lt;- function(new_y) {\n  \n   current_x &lt;- turtle_state$x\n   \n  # Get the next index position\n  next_pos &lt;- turtle_state$path_length + 1\n\n # Add the new point\n  turtle_state$path_x[next_pos] &lt;- current_x\n  turtle_state$path_y[next_pos] &lt;- new_y\n\n # Update the path length\n  turtle_state$path_length &lt;- next_pos\n  \n   #add the new point to the path\n  update_path(current_x, new_y)\n  \n  # Update turtle position\n  turtle_state$x &lt;- current_x\n  turtle_state$y &lt;- new_y\n  \n  \n   if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nSETY(100)\n\n\n\n\n\n\n\n\ntest - draw a square:\n\nsquare &lt;- function() {\n  \n  CS()\n  FD(50)\n  RT(90)\n  FD(50)\n  RT(90)\n  FD(50)\n  RT(90)\n  FD(50)\n}\n\nsquare()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndraw the sphere pattern\n\nHT(turtle_state) #hide the turtle\n\n\n\n\n\n\n\nchange_turtle_plot(turtle_state, plot = FALSE )\n\ndraw_sphere &lt;- function() {\n  # Clear the screen\n  CS()\n  \n  # Recreate the pattern\n  for (i in 1:20) {\n    for (j in 1:180) {\n      FD(1)  \n      RT(2)  \n    }\n    RT(18)    # After inner loop, turn right 18 degrees\n  }\n  \n Plotting_Turtle() \n}\n\ndraw_sphere()\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Goal",
    "section": "",
    "text": "Logo goes back much earlier than the Apple II, it was developed in 1967 by Cynthia Solomon, Wally Feurzig, and Seymour Papert. That’s five years before C and 24 years before Python! The three worked at Bolt, Beranek, and Newman (BBN), famous for all kinds of other computing history. BBN built the first Interface Message Processors (early routers) in 1968 for the ARPANET, which would evolve into the modern internet. …learn more\n\n\nOverview of some turtle commands and their shorthand equivalents:\nCLEARSCREEN - Clear the screen. (Shorthand: CS)\nHIDETURTLE - Don’t show the turtle cursor. (HT)\nSHOWTURTLE - Show the turtle cursor. (ST)\nHOME - Move back to the home position.\nFORWARD steps - Move forward steps. (FD)\nBACK steps - Move back steps. (BK)\nLEFT degrees - Turn left this many degrees. Negative degrees work too, they’ll turn it right. (LT)\nRIGHT degrees - Turn right this many degrees. (RT)\nSETHEADING degrees - Turn to an absolute heading of degrees. (SETH)\nSETPOS [x y] - Set the position to x, y coordinates. These are Cartesian, so 0,0 is the middle of the screen.\nSETX x - Set the horizontal position to x.\nSETY y - Set the vertical position to y.\n\n\n\nGenerate this code-Line with your own Logo-Code:\nREPEAT 20 [REPEAT 180 [FD 1 RT 2] RT 18]"
  },
  {
    "objectID": "index.html#commands",
    "href": "index.html#commands",
    "title": "Goal",
    "section": "",
    "text": "Overview of some turtle commands and their shorthand equivalents:\nCLEARSCREEN - Clear the screen. (Shorthand: CS)\nHIDETURTLE - Don’t show the turtle cursor. (HT)\nSHOWTURTLE - Show the turtle cursor. (ST)\nHOME - Move back to the home position.\nFORWARD steps - Move forward steps. (FD)\nBACK steps - Move back steps. (BK)\nLEFT degrees - Turn left this many degrees. Negative degrees work too, they’ll turn it right. (LT)\nRIGHT degrees - Turn right this many degrees. (RT)\nSETHEADING degrees - Turn to an absolute heading of degrees. (SETH)\nSETPOS [x y] - Set the position to x, y coordinates. These are Cartesian, so 0,0 is the middle of the screen.\nSETX x - Set the horizontal position to x.\nSETY y - Set the vertical position to y."
  },
  {
    "objectID": "index.html#planed-result",
    "href": "index.html#planed-result",
    "title": "Goal",
    "section": "",
    "text": "Generate this code-Line with your own Logo-Code:\nREPEAT 20 [REPEAT 180 [FD 1 RT 2] RT 18]"
  }
]