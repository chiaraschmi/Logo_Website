[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Goal",
    "section": "",
    "text": "Logo goes back much earlier than the Apple II, it was developed in 1967 by Cynthia Solomon, Wally Feurzig, and Seymour Papert. That’s five years before C and 24 years before Python! The three worked at Bolt, Beranek, and Newman (BBN), famous for all kinds of other computing history. BBN built the first Interface Message Processors (early routers) in 1968 for the ARPANET, which would evolve into the modern internet. …learn more\n\n\nOverview of some turtle commands and their shorthand equivalents:\nCLEARSCREEN - Clear the screen. (Shorthand: CS)\nHIDETURTLE - Don’t show the turtle cursor. (HT)\nSHOWTURTLE - Show the turtle cursor. (ST)\nHOME - Move back to the home position.\nFORWARD steps - Move forward steps. (FD)\nBACK steps - Move back steps. (BK)\nLEFT degrees - Turn left this many degrees. Negative degrees work too, they’ll turn it right. (LT)\nRIGHT degrees - Turn right this many degrees. (RT)\nSETHEADING degrees - Turn to an absolute heading of degrees. (SETH)\nSETPOS [x y] - Set the position to x, y coordinates. These are Cartesian, so 0,0 is the middle of the screen.\nSETX x - Set the horizontal position to x.\nSETY y - Set the vertical position to y.\n\n\n\nGenerate this code-Line with your own Logo-Code:\nREPEAT 20 [REPEAT 180 [FD 1 RT 2] RT 18]"
  },
  {
    "objectID": "index.html#commands",
    "href": "index.html#commands",
    "title": "Goal",
    "section": "",
    "text": "Overview of some turtle commands and their shorthand equivalents:\nCLEARSCREEN - Clear the screen. (Shorthand: CS)\nHIDETURTLE - Don’t show the turtle cursor. (HT)\nSHOWTURTLE - Show the turtle cursor. (ST)\nHOME - Move back to the home position.\nFORWARD steps - Move forward steps. (FD)\nBACK steps - Move back steps. (BK)\nLEFT degrees - Turn left this many degrees. Negative degrees work too, they’ll turn it right. (LT)\nRIGHT degrees - Turn right this many degrees. (RT)\nSETHEADING degrees - Turn to an absolute heading of degrees. (SETH)\nSETPOS [x y] - Set the position to x, y coordinates. These are Cartesian, so 0,0 is the middle of the screen.\nSETX x - Set the horizontal position to x.\nSETY y - Set the vertical position to y."
  },
  {
    "objectID": "index.html#planed-result",
    "href": "index.html#planed-result",
    "title": "Goal",
    "section": "",
    "text": "Generate this code-Line with your own Logo-Code:\nREPEAT 20 [REPEAT 180 [FD 1 RT 2] RT 18]"
  },
  {
    "objectID": "Logo_Github_oldversion.html",
    "href": "Logo_Github_oldversion.html",
    "title": "Final Logo",
    "section": "",
    "text": "Creating a global environment, to store the current state of the turtle:\n\nturtle_state &lt;- new.env()\nturtle_state$x &lt;- 0\nturtle_state$y &lt;- 0\nturtle_state$heading &lt;- 0\nturtle_state$is_visible &lt;- 1\nturtle_state$plot_history &lt;- list()\nplot_turtle &lt;- 1\nturtle_state\n\n&lt;environment: 0x7f7ad668f0d0&gt;\n\n\nThen creating an internal function, that will update the plot history in the global environment based on the new position of the turtle\n\nupdate_plot_history &lt;- function(from_x, from_y, to_x, to_y) {\n  line_segment &lt;- list(\n    x_start = from_x, #starting coordinates\n    y_start = from_y, \n    x_end = to_x, #ending coordinates\n    y_end = to_y\n  )\n  turtle_state$plot_history[[length(turtle_state$plot_history) + 1]] &lt;- line_segment #adding a line segment to the movement history -&gt; determining the current length of the history, adding 1, to get to the next available index and storing the new line segment in that position of the list\n}\n\nCreate a function that will plot the graphic\n\nPlotting_Turtle &lt;- function() {\n  \n  # Redraw the entire plot\n  par(pty = \"s\")\n  plot(0, 0, xlim=c(-100, 100), ylim=c(-100, 100),\n       xlab=\"X\", ylab=\"Y\", main=\"Turtle Graphics\", \n       type=\"n\")\n\n  # Redraw all previous lines\n  for (line in turtle_state$plot_history) {\n    lines(c(line$x_start, line$x_end), \n          c(line$y_start, line$y_end), \n          col=\"black\")\n    }\n  \n  if(turtle_state$is_visible == 1) {\n      points(turtle_state$x, turtle_state$y, pch=16, col=\"darkgreen\", cex=1.5)\n    #show heading with an arrow\n    arrow_length &lt;- 8\n    rad &lt;- turtle_state$heading * pi / 180\n    arrow_x &lt;- turtle_state$x + arrow_length * cos(rad)\n    arrow_y &lt;- turtle_state$y + arrow_length * sin(rad)\n    arrows(turtle_state$x, turtle_state$y, arrow_x, arrow_y, \n           length=0.1, col= \"#DAA520\", lwd=2)\n  }  \n}\n\nPlotting_Turtle()\n\n\n\n\n\n\n\n\nFunction, so I can change if I want to plot or not (so in loops it doesn’t plot for every step)\n\nchange_turtle_plot &lt;- function(turtle_state, plot = TRUE) {\n  # Wenn plot = TRUE, setze plot_turtle auf 1, sonst auf 0\n  turtle_state$plot_turtle &lt;- if(plot) 1 else 0\n}\n\nchange_turtle_plot(turtle_state, plot = TRUE)\n\nNow creating the CLEARSCREEN Funtion: Clears the screen\n\nCS &lt;- function() {\n  # Reset turtle to home position\n  turtle_state$x &lt;- 0\n  turtle_state$y &lt;- 0\n  turtle_state$heading &lt;- 0\n  turtle_state$plot_history &lt;- list()\n  \n  # Clear the current plot\n if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nCS()\n\n\n\n\n\n\n\n\nHIDETURTULE Function, when I want to hide the turtle:\n\nHT &lt;- function(turtle_state) {\n  turtle_state$is_visible &lt;- 0\n  \n  if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nHT(turtle_state)\n\n\n\n\n\n\n\n\nSHOWTURTULE Function, when I wnat to show the turtle:\n\nST &lt;- function(turtle_state) {\n  turtle_state$is_visible &lt;- 1\n  \n  if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nST(turtle_state)\n\n\n\n\n\n\n\n\nForward Function, to move X steps forward\n\nFD &lt;- function(steps, drawplot = TRUE) {\n  # current position of the turtle\n  old_x &lt;- turtle_state$x\n  old_y &lt;- turtle_state$y\n  \n  # Heading: Convert degrees to radians\n  rad &lt;- turtle_state$heading * pi / 180\n  \n  # Calculate new coordinates\n  new_x &lt;- old_x + steps * cos(rad)\n  new_y &lt;- old_y + steps * sin(rad)\n  \n  # Update plot history\n  update_plot_history(old_x, old_y, new_x, new_y)\n  \n  # Update turtle position\n  turtle_state$x &lt;- new_x\n  turtle_state$y &lt;- new_y\n  \n  if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\n\nFD(5)\n\n\n\n\n\n\n\n\nBACK, to go back X steps\n\nBK &lt;- function(steps) {\n  FD(-steps)\n}\n\nBK(5)\n\n\n\n\n\n\n\n\nFunction LEFT, to turn this many degrees\n\nLT &lt;- function(degrees) {\n  turtle_state$heading &lt;- (turtle_state$heading + degrees) %% 360\n  \n   if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nLT(90)\n\n\n\n\n\n\n\n\nFunction RIGHT, to turn this many degrees\n\nRT &lt;- function(degrees) {\n  turtle_state$heading &lt;- (turtle_state$heading - degrees) %% 360\n  \n   if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nFunction SETHEADING, to turn an absolute value of degrees\n\nSETH &lt;- function(degrees) {\n  \n  turtle_state$heading &lt;- degrees %% 360\n  \n   if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nSETPOS, to set the X and Y coordinates\n\nSETPOS &lt;- function(X, Y) {\n  # Set absolute position\n  old_x &lt;- turtle_state$x\n  old_y &lt;- turtle_state$y\n  \n  turtle_state$x &lt;- X\n  turtle_state$y &lt;- Y\n  \n  # Update plot history \n  update_plot_history(old_x, old_y, \n                      turtle_state$x, turtle_state$y)\n  \n   if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nHOME function, to move back to 0,0\n\nHOME&lt;- function() {\n  \n  old_x &lt;- turtle_state$x\n  old_y &lt;- turtle_state$y\n  \n  # Set the absolute position to zero\n  turtle_state$x &lt;- 0\n  turtle_state$y &lt;- 0\n  \n  # Update plot history\n  update_plot_history(old_x, old_y, \n                      turtle_state$x, turtle_state$y)\n  \n  # Redraw the entire plot\n   if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\nHOME()\n\n\n\n\n\n\n\n\nSETX, set the horizontal posiiton to X\n\nSETX &lt;- function(X) {\n # Set absolute position\n  old_x &lt;- turtle_state$x\n  old_y &lt;- turtle_state$y\n  \n  turtle_state$x &lt;- X\n  \n  # Update plot history if drawing\n  update_plot_history(old_x, old_y, \n                      turtle_state$x, turtle_state$y)\n  \n  if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nSETY, set the vertical position to Y\n\nSETY &lt;- function(Y) {\n # Set absolute position\n  old_x &lt;- turtle_state$x\n  old_y &lt;- turtle_state$y\n  \n  turtle_state$y &lt;- Y\n  \n  # Update plot history if drawing\n  update_plot_history(old_x, old_y, \n                      turtle_state$x, turtle_state$y)\n  \n   if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\ntest - draw a square:\n\nsquare &lt;- function() {\n  \n  CS()\n  FD(50)\n  RT(90)\n  FD(50)\n  RT(90)\n  FD(50)\n  RT(90)\n  FD(50)\n}\n\nsquare()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndraw the sphere pattern\n\nHT(turtle_state) #hide the turtle\n\n\n\n\n\n\n\nchange_turtle_plot(turtle_state, plot = FALSE )\n\ndraw_sphere &lt;- function() {\n  # Clear the screen\n  CS()\n  \n  # Recreate the pattern\n  for (i in 1:20) {\n    for (j in 1:180) {\n      FD(1)  \n      RT(2)  \n    }\n    RT(18)    # After inner loop, turn right 18 degrees\n  }\n  \n Plotting_Turtle() \n}\n\ndraw_sphere()\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  }
]