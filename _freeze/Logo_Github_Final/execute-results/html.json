{
  "hash": "cca4784c1d4a227df2570639fab30e9a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Final Logo\"\noutput: html_document\ndate: \"2025-04-04\"\n---\n\n\n\n\nGlobal environment with vectors for plot history\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  turtle_state <- new.env()\n  turtle_state$x <- 0\n  turtle_state$y <- 0\n  turtle_state$heading <- 0\n  turtle_state$is_visible <- 1\n  turtle_state$plot_turtle <- 1\n  \n  #vectors wtih maximum expectet length\n  turtle_state$path_x <- numeric(10000)\n  turtle_state$path_y <- numeric(10000)\n  \n   # Initialize first point\n  turtle_state$path_x[1] <- 0\n  turtle_state$path_y[1] <- 0\n  \n  # Keep track of the current length of the path\n  turtle_state$path_length <- 1\n```\n:::\n\n\n\n\n\nInternal function to update the history and global environment\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nupdate_path <- function(new_x, new_y) {\n  # Get the next index position\n  next_pos <- turtle_state$path_length + 1\n\n # Add the new point\n  turtle_state$path_x[next_pos] <- new_x\n  turtle_state$path_y[next_pos] <- new_y\n\n # Update the path length\n  turtle_state$path_length <- next_pos\n}\n```\n:::\n\n\n\n\nPlot turtle for the vectorized paths:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPlotting_Turtle <- function() {\n  # Set up the plot\n  par(pty = \"s\")\n  plot(0, 0, xlim=c(-100, 100), ylim=c(-100, 100),\n       xlab=\"X\", ylab=\"Y\", main=\"Turtle Graphics\", \n       type=\"n\")\n  \n  current_length <- turtle_state$path_length\n  if (current_length > 1) {\n    lines(\n      turtle_state$path_x[1:current_length], \n      turtle_state$path_y[1:current_length], \n      col=\"black\"\n    )\n  }\n  \n  # Draw the turtle if visible\n  if(turtle_state$is_visible == 1) {\n    points(turtle_state$x, turtle_state$y, pch=16, col=\"darkgreen\", cex=1.5)\n    \n    # Show heading with an arrow\n    arrow_length <- 8\n    rad <- turtle_state$heading * pi / 180\n    arrow_x <- turtle_state$x + arrow_length * cos(rad)\n    arrow_y <- turtle_state$y + arrow_length * sin(rad)\n    arrows(turtle_state$x, turtle_state$y, arrow_x, arrow_y, \n           length=0.1, col= \"#DAA520\", lwd=2)\n  }\n}\n\nPlotting_Turtle()\n```\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\nFunction, so I can change if I want to plot or not (so in loops it doesn't plot for every step)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchange_turtle_plot <- function(turtle_state, plot = TRUE) {\n  # Wenn plot = TRUE, setze plot_turtle auf 1, =FALSE auf 0\n  turtle_state$plot_turtle <- if(plot) 1 else 0\n}\n\nchange_turtle_plot(turtle_state, plot = TRUE)\n```\n:::\n\n\n\n\n\nNow creating the CLEARSCREEN Funtion: Clears the screen\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCS <- function() {\n  # Reset turtle to home position\n  turtle_state$x <- 0\n  turtle_state$y <- 0\n  turtle_state$heading <- 0\n  \n  # Initialize first point\n  turtle_state$path_x[1] <- 0\n  turtle_state$path_y[1] <- 0\n  \n  # Keep track of the current length of the path\n  turtle_state$path_length <- 1\n  \n  # Clear the current plot\n if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nCS()\n```\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\nHIDETURTULE Function, when I want to hide the turtle:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHT <- function(turtle_state) {\n  turtle_state$is_visible <- 0\n  \n  if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nHT(turtle_state)\n```\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\nSHOWTURTULE Function, when I wnat to show the turtle:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nST <- function(turtle_state) {\n  turtle_state$is_visible <- 1\n  \n  if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nST(turtle_state)\n```\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n\nForward Function\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nFD <- function(steps, drawplot = TRUE) {\n  \n  # Heading: Convert degrees to radians\n  rad <- turtle_state$heading * pi / 180\n  \n  # Calculate new coordinates\n  new_x <- turtle_state$x + steps * cos(rad)\n  new_y <- turtle_state$y + steps * sin(rad)\n  \n  #add the new point to the path\n  update_path(new_x, new_y)\n  \n  # Update turtle position\n  turtle_state$x <- new_x\n  turtle_state$y <- new_y\n  \n  if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\n\nFD(50)\n```\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n\nBACK, to go back X steps\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBK <- function(steps) {\n  FD(-steps)\n}\n\nBK(100)\n```\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n\nFunction LEFT, to turn this many degrees\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nLT <- function(degrees) {\n  turtle_state$heading <- (turtle_state$heading + degrees) %% 360\n  \n   if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nLT(90)\n```\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n\nFunction RIGHT, to turn this many degrees\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRT <- function(degrees) {\n  turtle_state$heading <- (turtle_state$heading - degrees) %% 360\n  \n   if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nRT(90)\n```\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n\nFunction SETHEADING, to turn an absolute value of degrees\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSETH <- function(degrees) {\n  \n  turtle_state$heading <- degrees %% 360\n  \n   if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nSETH(90)\n```\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\nSETPOS, to set the X and Y coordinates\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSETPOS <- function(new_x, new_y) {\n  # Set absolute position\n  # Get the next index position\n  next_pos <- turtle_state$path_length + 1\n\n # Add the new point\n  turtle_state$path_x[next_pos] <- new_x\n  turtle_state$path_y[next_pos] <- new_y\n\n # Update the path length\n  turtle_state$path_length <- next_pos\n  \n   #add the new point to the path\n  update_path(new_x, new_y)\n  \n  # Update turtle position\n  turtle_state$x <- new_x\n  turtle_state$y <- new_y\n  \n   if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nSETPOS(50,50)\n```\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\nHOME function, to move back to 0,0\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHOME<- function() {\n  # Set absolute position\n  # Get the next index position\n  next_pos <- turtle_state$path_length + 1\n\n # Add the new point\n  turtle_state$path_x[next_pos] <- 0\n  turtle_state$path_y[next_pos] <- 0\n\n # Update the path length\n  turtle_state$path_length <- next_pos\n  \n   #add the new point to the path\n  update_path(0, 0)\n  \n  # Update turtle position\n  turtle_state$x <- 0\n  turtle_state$y <- 0\n  \n   if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\nHOME()\n```\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nSETX, set the horizontal posiiton to X\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSETX <- function(new_x) {\n  \n   current_y <- turtle_state$y\n   \n  # Get the next index position\n  next_pos <- turtle_state$path_length + 1\n\n # Add the new point\n  turtle_state$path_x[next_pos] <- new_x\n  turtle_state$path_y[next_pos] <- current_y\n\n # Update the path length\n  turtle_state$path_length <- next_pos\n  \n   #add the new point to the path\n  update_path(new_x, current_y)\n  \n  # Update turtle position\n  turtle_state$x <- new_x\n  turtle_state$y <- current_y\n  \n  \n   if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nSETX(100)\n```\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n\nSETY, set the vertical position to Y\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSETY <- function(new_y) {\n  \n   current_x <- turtle_state$x\n   \n  # Get the next index position\n  next_pos <- turtle_state$path_length + 1\n\n # Add the new point\n  turtle_state$path_x[next_pos] <- current_x\n  turtle_state$path_y[next_pos] <- new_y\n\n # Update the path length\n  turtle_state$path_length <- next_pos\n  \n   #add the new point to the path\n  update_path(current_x, new_y)\n  \n  # Update turtle position\n  turtle_state$x <- current_x\n  turtle_state$y <- new_y\n  \n  \n   if(turtle_state$plot_turtle == 1) {\n  # Redraw the entire plot\n  Plotting_Turtle()\n  }\n}\n\nSETY(100)\n```\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n\ntest - draw a square:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsquare <- function() {\n  \n  CS()\n  FD(50)\n  RT(90)\n  FD(50)\n  RT(90)\n  FD(50)\n  RT(90)\n  FD(50)\n}\n\nsquare()\n```\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-17-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-17-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-17-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-17-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-17-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-17-7.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-17-8.png){width=672}\n:::\n:::\n\n\n\n\ndraw the sphere pattern\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHT(turtle_state) #hide the turtle\n```\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n\n```{.r .cell-code}\nchange_turtle_plot(turtle_state, plot = FALSE )\n\ndraw_sphere <- function() {\n  # Clear the screen\n  CS()\n  \n  # Recreate the pattern\n  for (i in 1:20) {\n    for (j in 1:180) {\n      FD(1)  \n      RT(2)  \n    }\n    RT(18)    # After inner loop, turn right 18 degrees\n  }\n  \n Plotting_Turtle() \n}\n\ndraw_sphere()\n```\n\n::: {.cell-output-display}\n![](Logo_Github_Final_files/figure-html/unnamed-chunk-18-2.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}